{%- from "kubernetes/map.jinja" import common with context -%}
{%- from "kubernetes/map.jinja" import master with context -%}
{%- from "kubernetes/map.jinja" import version %}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  creationTimestamp: null
  name: virtlet
  namespace: {{ common.addons.virtlet.namespace }}
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  template:
    metadata:
      creationTimestamp: null
      labels:
        runtime: virtlet
      name: virtlet
    spec:
      selector:
        matchLabels:
          runtime: virtlet
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      # hostPID is true to (1) enable VMs to survive virtlet container restart
      # (to be checked) and (2) to enable the use of nsenter in init container
      hostPID: true
      # bootstrap procedure needs to create a configmap in kube-system namespace
      serviceAccountName: virtlet

      # only run Virtlet pods on the nodes with extraRuntime=virtlet label
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: extraRuntime
                operator: In
                values:
                - virtlet
      initContainers:
      # The init container copies virtlet's flexvolume driver
      # to the default kubelet plugin dir and ensures that
      # the directories needed by libvirt & virtlet exist on the host
      - name: prepare-node
        image: {{ common.addons.virtlet.image }}
        imagePullPolicy: IfNotPresent
        command:
        - /prepare-node.sh
        volumeMounts:
        - name: k8s-flexvolume-plugins-dir
          mountPath: /kubelet-volume-plugins
        - name: run
          mountPropagation: Bidirectional
          mountPath: /run
        - name: dockersock
          mountPath: /var/run/docker.sock
        - name: log
          mountPath: /hostlog
        # for ensuring that /var/lib/libvirt/images exists on node
        - name: var-lib
          mountPath: /host-var-lib
        - name: dev
          mountPath: /dev
        - mountPath: /var/lib/virtlet
          name: virtlet
        securityContext:
          privileged: true
        env:
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: VIRTLET_DISABLE_KVM
          valueFrom:
            configMapKeyRef:
              name: virtlet-config
              key: disable_kvm
              optional: true
        - name: VIRTLET_SRIOV_SUPPORT
          valueFrom:
            configMapKeyRef:
              name: virtlet-config
              key: sriov_support
              optional: true
        - name: VIRTLET_DOWNLOAD_PROTOCOL
          valueFrom:
            configMapKeyRef:
              name: virtlet-config
              key: download_protocol
              optional: true
        - name: VIRTLET_LOGLEVEL
          valueFrom:
            configMapKeyRef:
              name: virtlet-config
              key: loglevel
              optional: true
        - name: VIRTLET_CALICO_SUBNET
          valueFrom:
            configMapKeyRef:
              name: virtlet-config
              key: calico-subnet
              optional: true
        - name: IMAGE_REGEXP_TRANSLATION
          valueFrom:
            configMapKeyRef:
              name: virtlet-config
              key: image_regexp_translation
              optional: true
        - name: VIRTLET_RAW_DEVICES
          valueFrom:
            configMapKeyRef:
              name: virtlet-config
              key: raw_devices
              optional: true
        - name: VIRTLET_DISABLE_LOGGING
          valueFrom:
            configMapKeyRef:
              name: virtlet-config
              key: disable_logging
              optional: true
        - name: VIRTLET_IMAGE_TRANSLATIONS_DIR
          value: /etc/virtlet/images

      containers:
      - name: libvirt
        image: {{ common.addons.virtlet.image }}
        imagePullPolicy: IfNotPresent
        command:
        - /libvirt.sh
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - socat - UNIX:/var/run/libvirt/libvirt-sock-ro </dev/null
        resources: {}
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /sys/fs/cgroup
          name: cgroup
        - mountPath: /lib/modules
          name: modules
          readOnly: true
        - mountPath: /boot
          name: boot
          readOnly: true
        - mountPath: /run
          name: run
          mountPropagation: Bidirectional
        - mountPath: /var/lib/virtlet
          name: virtlet
        - mountPath: /var/lib/libvirt
          name: libvirt
        - mountPath: /var/run/libvirt
          name: libvirt-sockets
        # the log dir is needed here because otherwise libvirt will produce errors
        # like this:
        # Unable to pre-create chardev file '/var/log/vms/afd75bbb-8e97-11e7-9561-02420ac00002/cirros-vm_0.log': No such file or directory
        - name: vms-log
          mountPath: /var/log/vms
        - name: libvirt-log
          mountPath: /var/log/libvirt
        - name: dev
          mountPath: /dev
        securityContext:
          privileged: true
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - socat - UNIX:/var/run/libvirt/libvirt-sock-ro </dev/null
      - name: virtlet
        image: {{ common.addons.virtlet.image }}
        # In case we inject local virtlet image we want to use it not officially available one
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - mountPath: /run
          name: run
          mountPropagation: Bidirectional
        # /boot and /lib/modules are required by supermin
        - mountPath: /lib/modules
          name: modules
          readOnly: true
        - mountPath: /boot
          name: boot
          readOnly: true
        - mountPath: /var/lib/virtlet
          name: virtlet
        - mountPath: /var/lib/libvirt
          name: libvirt
        - mountPath: /var/run/libvirt
          name: libvirt-sockets
        - mountPath: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
          name: k8s-flexvolume-plugins-dir
        - mountPath: /var/lib/kubelet/pods
          name: k8s-pods-dir
          mountPropagation: Bidirectional
        - name: vms-log
          mountPath: /var/log/vms
        - mountPath: /etc/virtlet/images
          name: image-name-translations
        - name: pods-log
          mountPath: /var/log/pods
        securityContext:
          privileged: true
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - socat - UNIX:/run/virtlet.sock </dev/null
      - name: vms
        image: {{ common.addons.virtlet.image }}
        imagePullPolicy: IfNotPresent
        command:
        - /vms.sh
        volumeMounts:
        - mountPath: /var/lib/virtlet
          name: virtlet
        - mountPath: /var/lib/libvirt
          name: libvirt
        - name: vms-log
          mountPath: /var/log/vms
        - name: dev
          mountPath: /dev
        - name: modules
          mountPath: /lib/modules
      volumes:
      # /dev is needed for host raw device access
      - hostPath:
          path: /dev
        name: dev
      - hostPath:
          path: /sys/fs/cgroup
        name: cgroup
      - hostPath:
          path: /lib/modules
        name: modules
      - hostPath:
          path: /boot
        name: boot
      - hostPath:
          path: /run
        name: run
      # TODO: don't hardcode docker socket location here
      # This will require CRI proxy installation to run
      # in host mount namespace.
      - hostPath:
          path: /var/run/docker.sock
        name: dockersock
      - hostPath:
          path: /var/lib/virtlet
        name: virtlet
      - hostPath:
          path: /var/lib/libvirt
        name: libvirt
      - hostPath:
          path: /var/log
        name: log
      - hostPath:
          path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
        name: k8s-flexvolume-plugins-dir
      - hostPath:
          path: /var/lib/kubelet/pods
        name: k8s-pods-dir
      - hostPath:
          path: /var/lib
        name: var-lib
      - hostPath:
          path: /var/log/virtlet/vms
        name: vms-log
      - hostPath:
          path: /var/log/libvirt
        name: libvirt-log
      - hostPath:
          path: /var/run/libvirt
        name: libvirt-sockets
      - hostPath:
          path: /var/log/pods
        name: pods-log
      - hostPath:
          path: /var/run/netns
        name: netns-dir
      - configMap:
          name: virtlet-image-translations
        name: image-name-translations
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  name: virtlet
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: virtlet
subjects:
- kind: ServiceAccount
  name: virtlet
  namespace: {{ common.addons.virtlet.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: virtlet
  namespace: {{ common.addons.virtlet.namespace }}
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    - nodes
    verbs:
    - create
    - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: configmap-reader
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: virtlet-userdata-reader
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  name: kubelet-node-binding
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: configmap-reader
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:nodes
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  name: vm-userdata-binding
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: virtlet-userdata-reader
subjects:
- kind: ServiceAccount
  name: virtlet
  namespace: {{ common.addons.virtlet.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: virtlet-crd
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
- apiGroups:
  - virtlet.k8s
  resources:
  - virtletimagemappings
  - virtletconfigmappings
  verbs:
  - list
  - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  name: virtlet-crd
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: virtlet-crd
subjects:
- kind: ServiceAccount
  name: virtlet
  namespace: {{ common.addons.virtlet.namespace }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: null
  name: virtlet
  namespace: {{ common.addons.virtlet.namespace }}
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: virtletimagemappings.virtlet.k8s
  namespace: {{ common.addons.virtlet.namespace }}
  labels:
    virtlet.cloud: ""
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  group: virtlet.k8s
  names:
    kind: VirtletImageMapping
    plural: virtletimagemappings
    shortNames:
    - vim
    singular: virtletimagemapping
  scope: Namespaced
  version: v1
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: virtletconfigmappings.virtlet.k8s
  namespace: {{ common.addons.virtlet.namespace }}
  labels:
    virtlet.cloud: ""
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  group: virtlet.k8s
  names:
    kind: VirtletConfigMapping
    plural: virtletconfigmappings
    shortNames:
    - vcm
    singular: virtletconfigmapping
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            config:
              properties:
                calicoSubnetSize:
                  maximum: 32
                  minimum: 0
                  type: integer
                cniConfigDir:
                  type: string
                cniPluginDir:
                  type: string
                criSocketPath:
                  type: string
                databasePath:
                  type: string
                disableKVM:
                  type: boolean
                disableLogging:
                  type: boolean
                downloadProtocol:
                  pattern: ^https?$
                  type: string
                enableRegexpImageTranslation:
                  type: boolean
                enableSriov:
                  type: boolean
                fdServerSocketPath:
                  type: string
                  type: string
                imageDir:
                  type: string
                imageTranslationConfigsDir:
                  type: string
                libvirtURI:
                  type: string
                logLevel:
                  maximum: 2147483647
                  minimum: 0
                  type: integer
                rawDevices:
                  type: string
                skipImageTranslation:
                  type: boolean
            nodeName:
              type: string
            nodeSelector:
              type: object
            priority:
              type: integer
  version: v1
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
---
apiVersion: v1
data:
  images.yml: |
    translations:
      - name: cirros
        url: https://github.com/mirantis/virtlet/releases/download/v0.9.3/cirros.img
kind: ConfigMap
metadata:
  name: virtlet-image-translations
  namespace: {{ common.addons.virtlet.namespace }}
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
